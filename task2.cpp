#include <iostream> // Підключення бібліотеки для введення/виведення даних
#include <stdexcept> // Підключення бібліотеки для стандартних класів винятків (наприклад, std::runtime_error)

// Використання стандартного простору імен
using namespace std;

// Головна функція програми
int main(void) {
    int a = 0; // Оголошення та ініціалізація цілочисельної змінної 'a' [cite: 11]
    int b = 0; // Оголошення та ініціалізація цілочисельної змінної 'b' [cite: 11]
    int c = 0; // Оголошення та ініціалізація цілочисельної змінної 'c' [cite: 11]

    cout << "Enter the dividend (a): "; // Запит на введення діленого
    cin >> a; // Зчитування діленого [cite: 11]

    cout << "Enter the divisor (b): "; // Запит на введення дільника
    cin >> b; // Зчитування дільника [cite: 11]

    try { // Початок блоку try для відстеження потенційних винятків
        if (b == 0) { // Перевірка, чи дільник 'b' дорівнює нулю
            // Якщо дільник нуль, генеруємо виняток std::runtime_error
            // Це відповідає сценарію "solve potential problems with arithmetic operations" [cite: 9]
            // та необхідності "inform the user of any exceptions in simple words" [cite: 10]
            throw runtime_error("Your input is not valid, you can't divide by zero.");
        }
        c = a / b; // Виконання операції ділення [cite: 11]
        cout << c << endl; // Виведення результату ділення [cite: 11]
    }
    catch (const runtime_error& e) { // Початок блоку catch для перехоплення винятків типу std::runtime_error
        // e - це об'єкт винятку, який містить інформацію про помилку
        cerr << e.what() << endl; // Виведення повідомлення про помилку (отриманого через метод what()) в потік помилок cerr
                                  // Це забезпечує виведення "Your input is not valid, you can't divide by zero." [cite: 12]
    }
    // Зауваження: для цілочисельного ділення на нуль в C++ поведінка не визначена (undefined behavior).
    // Тому явна перевірка `if (b == 0)` і генерація винятку є найкращою практикою.
    // Деякі компілятори/середовища можуть генерувати сигнал, але краще контролювати це явно.

    return 0; // Повернення 0, що сигналізує про успішне завершення програми [cite: 11]
}
